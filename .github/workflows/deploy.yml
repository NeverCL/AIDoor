name: AIDoor API Deploy

on:
  push:
    branches: ["main"]
    paths:
      - "api/**"
  pull_request:
    branches: ["main"]
    paths:
      - "api/**"
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 生成短时间戳标签
      - name: Generate short timestamp
        id: timestamp
        run: echo "SHORT_TS=$(date +%m%d%H%M)" >> $GITHUB_OUTPUT

      # 缓存 NuGet 包
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json', '**/Project.Assets.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # 缓存 Docker 层
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./api
          file: ./api/AIDoor.WebAPI/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ secrets.ALIYUN_REGISTRY }}/${{ secrets.ALIYUN_NAMESPACE }}/aidoor-webapi:latest
            ${{ secrets.ALIYUN_REGISTRY }}/${{ secrets.ALIYUN_NAMESPACE }}/aidoor-webapi:${{ steps.timestamp.outputs.SHORT_TS }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.timestamp.outputs.SHORT_TS }}

      # 维护缓存大小，移动缓存
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 只有在推送到主分支且不是PR时才执行部署
      - name: Set up kubectl
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config

      - name: Deploy to Kubernetes
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          # 创建aidoor命名空间（如果不存在）
          kubectl get namespace aidoor > /dev/null 2>&1 || kubectl create namespace aidoor

          # 检查认证密钥是否已存在
          if ! kubectl get secret aidoor-auth-keys -n aidoor > /dev/null 2>&1; then
            echo "生成新的数据保护密钥..."
            DATA_PROTECTION_KEY=$(openssl rand -base64 32)
            
            kubectl create secret generic aidoor-auth-keys \
                --namespace=aidoor \
                --from-literal=dataProtectionKey="$DATA_PROTECTION_KEY"
            echo "数据保护密钥已创建。"
          else
            echo "使用现有数据保护密钥。"
          fi

          # 使用环境变量替换占位符并应用
          export REGISTRY="${{ secrets.ALIYUN_REGISTRY }}/${{ secrets.ALIYUN_NAMESPACE }}"
          export TAG="${{ steps.timestamp.outputs.SHORT_TS }}"

          envsubst < ./api/k8s/aidoor-webapi.yaml | kubectl apply -f -

      - name: Wait for rollout to finish
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          kubectl rollout status deployment/aidoor-webapi -n aidoor
