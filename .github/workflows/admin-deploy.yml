name: AIDoor Admin Deploy

on:
  push:
    branches: ["main"]
    paths:
      - "admin/**"
  pull_request:
    branches: ["main"]
    paths:
      - "admin/**"
  workflow_dispatch:

env:
  REGISTRY: registry.cn-beijing.aliyuncs.com
  IMAGE_NAME: wdora/ai-admin

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 生成短时间戳标签
      - name: Generate short timestamp
        id: timestamp
        run: echo "SHORT_TS=$(date +%m%d%H%M)" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "23"

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 缓存 Docker 层
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: gmmtec
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./admin
          file: ./admin/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.timestamp.outputs.SHORT_TS }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILD_VERSION=${{ steps.timestamp.outputs.SHORT_TS }}

      # 维护缓存大小，移动缓存
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 只有在推送到主分支且不是PR时才执行部署
      - name: Set up kubeconfig
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          # 创建命名空间（如果不存在）
          kubectl create namespace aidoor --dry-run=client -o yaml | kubectl apply -f -

          # 设置镜像标签
          export IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.timestamp.outputs.SHORT_TS }}

          # 应用 Kubernetes 配置
          envsubst < admin/kubernetes/deployment.yaml | kubectl apply -f -
          kubectl apply -f admin/kubernetes/service.yaml -n aidoor

      - name: Verify deployment
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          kubectl rollout status deployment/aidoor-admin -n aidoor
