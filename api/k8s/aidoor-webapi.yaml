apiVersion: v1
kind: ConfigMap
metadata:
  name: aidoor-webapi-config
  namespace: aidoor
data:
  appsettings.json: |
    {
      "Logging": {
        "LogLevel": {
          "Default": "Information",
          "Microsoft.AspNetCore": "Warning"
        }
      },
      "ConnectionStrings": {
        "Redis": "redis-service:6379"
      },
      "FileStorage": {
        "UploadDirectory": "/app/App_Data/uploads",
        "MaxFileSize": 10485760
      },
      "AllowedHosts": "*"
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: aidoor-auth-keys
  namespace: aidoor
type: Opaque
data:
  # 使用随机生成的Base64加密键，或从外部传入
  # 这个密钥用于 ASP.NET Core Data Protection API
  # 可通过命令生成: openssl rand -base64 32
  dataProtectionKey: "RFr9z0QPp8LNDX3rNwxgLTQVm1BBmXTmOyQJpTDCrpM="
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aidoor-webapi
  namespace: aidoor
  labels:
    app: aidoor-webapi
spec:
  replicas: 2
  selector:
    matchLabels:
      app: aidoor-webapi
  template:
    metadata:
      labels:
        app: aidoor-webapi
    spec:
      containers:
        - name: aidoor-webapi
          image: ${REGISTRY}/aidoor-webapi:${TAG}
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: "Production"
            - name: DataProtection__Key
              valueFrom:
                secretKeyRef:
                  name: aidoor-auth-keys
                  key: dataProtectionKey
          volumeMounts:
            - name: config-volume
              mountPath: /app/appsettings.json
              subPath: appsettings.json
            - name: uploads-volume
              mountPath: /app/App_Data/uploads
            - name: keys-volume
              mountPath: /app/keys
              readOnly: true
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: config-volume
          configMap:
            name: aidoor-webapi-config
        - name: uploads-volume
          persistentVolumeClaim:
            claimName: aidoor-uploads-pvc
        - name: keys-volume
          secret:
            secretName: aidoor-auth-keys
---
apiVersion: v1
kind: Service
metadata:
  name: aidoor-webapi-service
  namespace: aidoor
spec:
  selector:
    app: aidoor-webapi
  ports:
    - port: 80
      targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: aidoor-uploads-pvc
  namespace: aidoor
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aidoor-webapi-ingress
  namespace: aidoor
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
spec:
  rules:
    - host: api.aidoor.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: aidoor-webapi-service
                port:
                  number: 80
  tls:
    - hosts:
        - api.aidoor.example.com
      secretName: aidoor-tls-secret
